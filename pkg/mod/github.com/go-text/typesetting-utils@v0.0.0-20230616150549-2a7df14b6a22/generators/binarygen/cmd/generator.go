package main

import (
	"fmt"
	"log"
	"os"
	"os/exec"
	"path/filepath"
	"strings"

	"github.com/go-text/typesetting-utils/generators/binarygen/analysis"
	"github.com/go-text/typesetting-utils/generators/binarygen/generator"
	"github.com/go-text/typesetting-utils/generators/binarygen/generator/parser"
)

func main() {
	if len(os.Args) < 3 {
		log.Fatal("missing directory and suffix for input files")
	}
	dir, suffix := os.Args[1], os.Args[2]

	// select the input files
	entries, err := os.ReadDir(dir)
	if err != nil {
		log.Fatal(err)
	}

	var filePaths []string
	for _, entry := range entries {
		if entry.IsDir() {
			continue
		}
		if strings.HasSuffix(entry.Name(), suffix) {
			filePaths = append(filePaths, filepath.Join(dir, entry.Name()))
		}
	}

	if len(filePaths) == 0 {
		fmt.Println("No source files.")
		return
	}

	// perform the (costly) package analysis
	fmt.Printf("Loading package code for '%s'...\n", dir)
	pkg, _, err := analysis.ImportSource(filePaths[0])
	if err != nil {
		log.Fatal(err)
	}

	fmt.Printf("Generating code for %d source files...\n", len(filePaths))
	accu := make(generator.Accu)
	// generate the code file by file
	for _, path := range filePaths {
		absPath, err := filepath.Abs(path)
		if err != nil {
			log.Fatal(err)
		}

		ana := analysis.NewAnalyserFromPkg(pkg, path, absPath)

		buf := generator.NewBuffer(accu)
		parser.ParsersForFile(ana, &buf)

		content := []byte(fmt.Sprintf(`
		// SPDX-License-Identifier: Unlicense OR BSD-3-Clause

		package %s
	
		// Code generated by binarygen from %s. DO NOT EDIT
	
		%s
		`, ana.PackageName(), ana.Source, buf.Code(ana.ChildTypes)))

		outFile := strings.TrimSuffix(absPath, suffix) + "_gen.go"

		err = os.WriteFile(outFile, content, os.ModePerm)
		if err != nil {
			log.Fatal(err)
		}

		err = exec.Command("goimports", "-w", outFile).Run()
		if err != nil {
			log.Fatal(err)
		}
	}

	fmt.Println("Done.")
}
